Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 variable_list function_list

    3 asm: _ASM

    4 function_list: function
    5              | function_list function
    6              | function_list asm

    7 $@2: %empty

    8 $@3: %empty

    9 function: type _ID $@2 _LPAREN parameter_list _RPAREN $@3 body

   10 type: _TYPE
   11     | _TYPE _ASTERIKS

   12 parameter_list: %empty
   13               | parameter
   14               | parameter_list _COMMA parameter

   15 parameter: type _ID

   16 $@4: %empty

   17 body: _LBRACKET variable_list $@4 statement_list _RBRACKET

   18 variable_list: %empty
   19              | variable_list variable

   20 variable_part: _ID
   21              | variable_part _COMMA _ID

   22 variable: type variable_part _SEMICOLON

   23 statement_list: %empty
   24               | statement_list statement

   25 statement: compound_statement
   26          | assignment_statement
   27          | if_statement
   28          | return_statement
   29          | increment
   30          | decrement
   31          | do_loop
   32          | while_loop
   33          | for_loop
   34          | asm

   35 increment: _ID _INC _SEMICOLON

   36 decrement: _ID _DEC _SEMICOLON

   37 compound_statement: _LBRACKET statement_list _RBRACKET

   38 @5: %empty

   39 do_loop: _DO @5 statement _WHILE _LPAREN rel_exp _RPAREN _SEMICOLON

   40 @6: %empty

   41 $@7: %empty

   42 while_loop: _WHILE @6 _LPAREN rel_exp $@7 _RPAREN statement

   43 @8: %empty

   44 $@9: %empty

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 statement

   46 assignment_statement: left_part_assignment _SEMICOLON

   47 left_part_assignment: _ID _ASSIGN num_exp

   48 arop: _AROP
   49     | _ASTERIKS

   50 num_exp: exp
   51        | num_exp arop exp
   52        | conditional_operator

   53 exp: literal
   54    | _ID
   55    | function_call
   56    | _LPAREN num_exp _RPAREN
   57    | _ID _INC
   58    | _ID _DEC
   59    | _ASTERIKS exp
   60    | _AMP exp

   61 literal: _INT_NUMBER
   62        | _BYTE_NUMBER

   63 $@10: %empty

   64 function_call: _ID $@10 _LPAREN argument_list _RPAREN

   65 argument_list: argument
   66              | argument_list _COMMA argument

   67 argument: %empty
   68         | num_exp

   69 if_statement: if_part
   70             | if_part _ELSE statement

   71 conditional_operator: _LPAREN rel_exp _RPAREN _QMARK conditional_value _DDOT conditional_value

   72 conditional_value: literal
   73                  | _ID

   74 @11: %empty

   75 $@12: %empty

   76 if_part: _IF _LPAREN @11 rel_exp $@12 _RPAREN statement

   77 rel_exp: num_exp _RELOP num_exp

   78 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 10 11
_IF (259) 76
_ELSE (260) 70
_RETURN (261) 78
_ID (262) 9 15 20 21 35 36 47 54 57 58 64 73
_INT_NUMBER (263) 61
_BYTE_NUMBER (264) 62
_LPAREN (265) 9 39 42 45 56 64 71 76
_RPAREN (266) 9 39 42 45 56 64 71 76
_LBRACKET (267) 17 37
_FOR (268) 45
_RBRACKET (269) 17 37
_ASSIGN (270) 47
_SEMICOLON (271) 22 35 36 39 45 46 78
_AROP (272) 48
_ASTERIKS (273) 11 49 59
_RELOP (274) 77
_INC (275) 35 57
_DEC (276) 36 58
_DDOT (277) 71
_QMARK (278) 71
_COMMA (279) 14 21 66
_DO (280) 39
_WHILE (281) 39 42
_AMP (282) 60
_ASM (283) 3
ONLY_IF (284)


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
program (31)
    on left: 2, on right: 0
$@1 (32)
    on left: 1, on right: 2
asm (33)
    on left: 3, on right: 6 34
function_list (34)
    on left: 4 5 6, on right: 2 5 6
function (35)
    on left: 9, on right: 4 5
$@2 (36)
    on left: 7, on right: 9
$@3 (37)
    on left: 8, on right: 9
type (38)
    on left: 10 11, on right: 9 15 22
parameter_list (39)
    on left: 12 13 14, on right: 9 14
parameter (40)
    on left: 15, on right: 13 14
body (41)
    on left: 17, on right: 9
$@4 (42)
    on left: 16, on right: 17
variable_list (43)
    on left: 18 19, on right: 2 17 19
variable_part (44)
    on left: 20 21, on right: 21 22
variable (45)
    on left: 22, on right: 19
statement_list (46)
    on left: 23 24, on right: 17 24 37
statement (47)
    on left: 25 26 27 28 29 30 31 32 33 34, on right: 24 39 42 45 70
    76
increment (48)
    on left: 35, on right: 29
decrement (49)
    on left: 36, on right: 30
compound_statement (50)
    on left: 37, on right: 25
do_loop (51)
    on left: 39, on right: 31
@5 (52)
    on left: 38, on right: 39
while_loop (53)
    on left: 42, on right: 32
@6 (54)
    on left: 40, on right: 42
$@7 (55)
    on left: 41, on right: 42
for_loop (56)
    on left: 45, on right: 33
@8 (57)
    on left: 43, on right: 45
$@9 (58)
    on left: 44, on right: 45
assignment_statement (59)
    on left: 46, on right: 26 45
left_part_assignment (60)
    on left: 47, on right: 45 46
arop (61)
    on left: 48 49, on right: 51
num_exp (62)
    on left: 50 51 52, on right: 47 51 56 68 77 78
exp (63)
    on left: 53 54 55 56 57 58 59 60, on right: 50 51 59 60
literal (64)
    on left: 61 62, on right: 53 72
function_call (65)
    on left: 64, on right: 55
$@10 (66)
    on left: 63, on right: 64
argument_list (67)
    on left: 65 66, on right: 64 66
argument (68)
    on left: 67 68, on right: 65 66
if_statement (69)
    on left: 69 70, on right: 27
conditional_operator (70)
    on left: 71, on right: 52
conditional_value (71)
    on left: 72 73, on right: 71
if_part (72)
    on left: 76, on right: 69 70
@11 (73)
    on left: 74, on right: 76
$@12 (74)
    on left: 75, on right: 76
rel_exp (75)
    on left: 77, on right: 39 42 45 71 76
return_statement (76)
    on left: 78, on right: 28


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . variable_list function_list

    $default  reduce using rule 18 (variable_list)

    variable_list  go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 variable_list . function_list
   19 variable_list: variable_list . variable

    _TYPE  shift, and go to state 5

    function_list  go to state 6
    function       go to state 7
    type           go to state 8
    variable       go to state 9


State 5

   10 type: _TYPE .
   11     | _TYPE . _ASTERIKS

    _ASTERIKS  shift, and go to state 10

    $default  reduce using rule 10 (type)


State 6

    2 program: $@1 variable_list function_list .
    5 function_list: function_list . function
    6              | function_list . asm

    _TYPE  shift, and go to state 5
    _ASM   shift, and go to state 11

    $default  reduce using rule 2 (program)

    asm       go to state 12
    function  go to state 13
    type      go to state 14


State 7

    4 function_list: function .

    $default  reduce using rule 4 (function_list)


State 8

    9 function: type . _ID $@2 _LPAREN parameter_list _RPAREN $@3 body
   22 variable: type . variable_part _SEMICOLON

    _ID  shift, and go to state 15

    variable_part  go to state 16


State 9

   19 variable_list: variable_list variable .

    $default  reduce using rule 19 (variable_list)


State 10

   11 type: _TYPE _ASTERIKS .

    $default  reduce using rule 11 (type)


State 11

    3 asm: _ASM .

    $default  reduce using rule 3 (asm)


State 12

    6 function_list: function_list asm .

    $default  reduce using rule 6 (function_list)


State 13

    5 function_list: function_list function .

    $default  reduce using rule 5 (function_list)


State 14

    9 function: type . _ID $@2 _LPAREN parameter_list _RPAREN $@3 body

    _ID  shift, and go to state 17


State 15

    9 function: type _ID . $@2 _LPAREN parameter_list _RPAREN $@3 body
   20 variable_part: _ID .

    _LPAREN   reduce using rule 7 ($@2)
    $default  reduce using rule 20 (variable_part)

    $@2  go to state 18


State 16

   21 variable_part: variable_part . _COMMA _ID
   22 variable: type variable_part . _SEMICOLON

    _SEMICOLON  shift, and go to state 19
    _COMMA      shift, and go to state 20


State 17

    9 function: type _ID . $@2 _LPAREN parameter_list _RPAREN $@3 body

    $default  reduce using rule 7 ($@2)

    $@2  go to state 18


State 18

    9 function: type _ID $@2 . _LPAREN parameter_list _RPAREN $@3 body

    _LPAREN  shift, and go to state 21


State 19

   22 variable: type variable_part _SEMICOLON .

    $default  reduce using rule 22 (variable)


State 20

   21 variable_part: variable_part _COMMA . _ID

    _ID  shift, and go to state 22


State 21

    9 function: type _ID $@2 _LPAREN . parameter_list _RPAREN $@3 body

    _TYPE  shift, and go to state 5

    $default  reduce using rule 12 (parameter_list)

    type            go to state 23
    parameter_list  go to state 24
    parameter       go to state 25


State 22

   21 variable_part: variable_part _COMMA _ID .

    $default  reduce using rule 21 (variable_part)


State 23

   15 parameter: type . _ID

    _ID  shift, and go to state 26


State 24

    9 function: type _ID $@2 _LPAREN parameter_list . _RPAREN $@3 body
   14 parameter_list: parameter_list . _COMMA parameter

    _RPAREN  shift, and go to state 27
    _COMMA   shift, and go to state 28


State 25

   13 parameter_list: parameter .

    $default  reduce using rule 13 (parameter_list)


State 26

   15 parameter: type _ID .

    $default  reduce using rule 15 (parameter)


State 27

    9 function: type _ID $@2 _LPAREN parameter_list _RPAREN . $@3 body

    $default  reduce using rule 8 ($@3)

    $@3  go to state 29


State 28

   14 parameter_list: parameter_list _COMMA . parameter

    _TYPE  shift, and go to state 5

    type       go to state 23
    parameter  go to state 30


State 29

    9 function: type _ID $@2 _LPAREN parameter_list _RPAREN $@3 . body

    _LBRACKET  shift, and go to state 31

    body  go to state 32


State 30

   14 parameter_list: parameter_list _COMMA parameter .

    $default  reduce using rule 14 (parameter_list)


State 31

   17 body: _LBRACKET . variable_list $@4 statement_list _RBRACKET

    $default  reduce using rule 18 (variable_list)

    variable_list  go to state 33


State 32

    9 function: type _ID $@2 _LPAREN parameter_list _RPAREN $@3 body .

    $default  reduce using rule 9 (function)


State 33

   17 body: _LBRACKET variable_list . $@4 statement_list _RBRACKET
   19 variable_list: variable_list . variable

    _TYPE  shift, and go to state 5

    $default  reduce using rule 16 ($@4)

    type      go to state 34
    $@4       go to state 35
    variable  go to state 9


State 34

   22 variable: type . variable_part _SEMICOLON

    _ID  shift, and go to state 36

    variable_part  go to state 16


State 35

   17 body: _LBRACKET variable_list $@4 . statement_list _RBRACKET

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 37


State 36

   20 variable_part: _ID .

    $default  reduce using rule 20 (variable_part)


State 37

   17 body: _LBRACKET variable_list $@4 statement_list . _RBRACKET
   24 statement_list: statement_list . statement

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _RBRACKET  shift, and go to state 43
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 47
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 38

   76 if_part: _IF . _LPAREN @11 rel_exp $@12 _RPAREN statement

    _LPAREN  shift, and go to state 59


State 39

   78 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 66
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70


State 40

   35 increment: _ID . _INC _SEMICOLON
   36 decrement: _ID . _DEC _SEMICOLON
   47 left_part_assignment: _ID . _ASSIGN num_exp

    _ASSIGN  shift, and go to state 71
    _INC     shift, and go to state 72
    _DEC     shift, and go to state 73


State 41

   37 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 74


State 42

   45 for_loop: _FOR . _LPAREN assignment_statement @8 rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 statement

    _LPAREN  shift, and go to state 75


State 43

   17 body: _LBRACKET variable_list $@4 statement_list _RBRACKET .

    $default  reduce using rule 17 (body)


State 44

   39 do_loop: _DO . @5 statement _WHILE _LPAREN rel_exp _RPAREN _SEMICOLON

    $default  reduce using rule 38 (@5)

    @5  go to state 76


State 45

   42 while_loop: _WHILE . @6 _LPAREN rel_exp $@7 _RPAREN statement

    $default  reduce using rule 40 (@6)

    @6  go to state 77


State 46

   34 statement: asm .

    $default  reduce using rule 34 (statement)


State 47

   24 statement_list: statement_list statement .

    $default  reduce using rule 24 (statement_list)


State 48

   29 statement: increment .

    $default  reduce using rule 29 (statement)


State 49

   30 statement: decrement .

    $default  reduce using rule 30 (statement)


State 50

   25 statement: compound_statement .

    $default  reduce using rule 25 (statement)


State 51

   31 statement: do_loop .

    $default  reduce using rule 31 (statement)


State 52

   32 statement: while_loop .

    $default  reduce using rule 32 (statement)


State 53

   33 statement: for_loop .

    $default  reduce using rule 33 (statement)


State 54

   26 statement: assignment_statement .

    $default  reduce using rule 26 (statement)


State 55

   46 assignment_statement: left_part_assignment . _SEMICOLON

    _SEMICOLON  shift, and go to state 78


State 56

   27 statement: if_statement .

    $default  reduce using rule 27 (statement)


State 57

   69 if_statement: if_part .
   70             | if_part . _ELSE statement

    _ELSE  shift, and go to state 79

    $default  reduce using rule 69 (if_statement)


State 58

   28 statement: return_statement .

    $default  reduce using rule 28 (statement)


State 59

   76 if_part: _IF _LPAREN . @11 rel_exp $@12 _RPAREN statement

    $default  reduce using rule 74 (@11)

    @11  go to state 80


State 60

   54 exp: _ID .
   57    | _ID . _INC
   58    | _ID . _DEC
   64 function_call: _ID . $@10 _LPAREN argument_list _RPAREN

    _INC  shift, and go to state 81
    _DEC  shift, and go to state 82

    _LPAREN   reduce using rule 63 ($@10)
    $default  reduce using rule 54 (exp)

    $@10  go to state 83


State 61

   61 literal: _INT_NUMBER .

    $default  reduce using rule 61 (literal)


State 62

   62 literal: _BYTE_NUMBER .

    $default  reduce using rule 62 (literal)


State 63

   56 exp: _LPAREN . num_exp _RPAREN
   71 conditional_operator: _LPAREN . rel_exp _RPAREN _QMARK conditional_value _DDOT conditional_value

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 84
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70
    rel_exp               go to state 85


State 64

   59 exp: _ASTERIKS . exp

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 86
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    exp            go to state 87
    literal        go to state 68
    function_call  go to state 69


State 65

   60 exp: _AMP . exp

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 86
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    exp            go to state 88
    literal        go to state 68
    function_call  go to state 69


State 66

   51 num_exp: num_exp . arop exp
   78 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 89
    _AROP       shift, and go to state 90
    _ASTERIKS   shift, and go to state 91

    arop  go to state 92


State 67

   50 num_exp: exp .

    $default  reduce using rule 50 (num_exp)


State 68

   53 exp: literal .

    $default  reduce using rule 53 (exp)


State 69

   55 exp: function_call .

    $default  reduce using rule 55 (exp)


State 70

   52 num_exp: conditional_operator .

    $default  reduce using rule 52 (num_exp)


State 71

   47 left_part_assignment: _ID _ASSIGN . num_exp

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 93
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70


State 72

   35 increment: _ID _INC . _SEMICOLON

    _SEMICOLON  shift, and go to state 94


State 73

   36 decrement: _ID _DEC . _SEMICOLON

    _SEMICOLON  shift, and go to state 95


State 74

   24 statement_list: statement_list . statement
   37 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _RBRACKET  shift, and go to state 96
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 47
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 75

   45 for_loop: _FOR _LPAREN . assignment_statement @8 rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 statement

    _ID  shift, and go to state 97

    assignment_statement  go to state 98
    left_part_assignment  go to state 55


State 76

   39 do_loop: _DO @5 . statement _WHILE _LPAREN rel_exp _RPAREN _SEMICOLON

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 99
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 77

   42 while_loop: _WHILE @6 . _LPAREN rel_exp $@7 _RPAREN statement

    _LPAREN  shift, and go to state 100


State 78

   46 assignment_statement: left_part_assignment _SEMICOLON .

    $default  reduce using rule 46 (assignment_statement)


State 79

   70 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 101
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 80

   76 if_part: _IF _LPAREN @11 . rel_exp $@12 _RPAREN statement

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 102
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70
    rel_exp               go to state 103


State 81

   57 exp: _ID _INC .

    $default  reduce using rule 57 (exp)


State 82

   58 exp: _ID _DEC .

    $default  reduce using rule 58 (exp)


State 83

   64 function_call: _ID $@10 . _LPAREN argument_list _RPAREN

    _LPAREN  shift, and go to state 104


State 84

   51 num_exp: num_exp . arop exp
   56 exp: _LPAREN num_exp . _RPAREN
   77 rel_exp: num_exp . _RELOP num_exp

    _RPAREN    shift, and go to state 105
    _AROP      shift, and go to state 90
    _ASTERIKS  shift, and go to state 91
    _RELOP     shift, and go to state 106

    arop  go to state 92


State 85

   71 conditional_operator: _LPAREN rel_exp . _RPAREN _QMARK conditional_value _DDOT conditional_value

    _RPAREN  shift, and go to state 107


State 86

   56 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 108
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70


State 87

   59 exp: _ASTERIKS exp .

    $default  reduce using rule 59 (exp)


State 88

   60 exp: _AMP exp .

    $default  reduce using rule 60 (exp)


State 89

   78 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 78 (return_statement)


State 90

   48 arop: _AROP .

    $default  reduce using rule 48 (arop)


State 91

   49 arop: _ASTERIKS .

    $default  reduce using rule 49 (arop)


State 92

   51 num_exp: num_exp arop . exp

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 86
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    exp            go to state 109
    literal        go to state 68
    function_call  go to state 69


State 93

   47 left_part_assignment: _ID _ASSIGN num_exp .
   51 num_exp: num_exp . arop exp

    _AROP      shift, and go to state 90
    _ASTERIKS  shift, and go to state 91

    $default  reduce using rule 47 (left_part_assignment)

    arop  go to state 92


State 94

   35 increment: _ID _INC _SEMICOLON .

    $default  reduce using rule 35 (increment)


State 95

   36 decrement: _ID _DEC _SEMICOLON .

    $default  reduce using rule 36 (decrement)


State 96

   37 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 37 (compound_statement)


State 97

   47 left_part_assignment: _ID . _ASSIGN num_exp

    _ASSIGN  shift, and go to state 71


State 98

   45 for_loop: _FOR _LPAREN assignment_statement . @8 rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 statement

    $default  reduce using rule 43 (@8)

    @8  go to state 110


State 99

   39 do_loop: _DO @5 statement . _WHILE _LPAREN rel_exp _RPAREN _SEMICOLON

    _WHILE  shift, and go to state 111


State 100

   42 while_loop: _WHILE @6 _LPAREN . rel_exp $@7 _RPAREN statement

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 102
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70
    rel_exp               go to state 112


State 101

   70 if_statement: if_part _ELSE statement .

    $default  reduce using rule 70 (if_statement)


State 102

   51 num_exp: num_exp . arop exp
   77 rel_exp: num_exp . _RELOP num_exp

    _AROP      shift, and go to state 90
    _ASTERIKS  shift, and go to state 91
    _RELOP     shift, and go to state 106

    arop  go to state 92


State 103

   76 if_part: _IF _LPAREN @11 rel_exp . $@12 _RPAREN statement

    $default  reduce using rule 75 ($@12)

    $@12  go to state 113


State 104

   64 function_call: _ID $@10 _LPAREN . argument_list _RPAREN

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    $default  reduce using rule 67 (argument)

    num_exp               go to state 114
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    argument_list         go to state 115
    argument              go to state 116
    conditional_operator  go to state 70


State 105

   56 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 56 (exp)


State 106

   77 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 117
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70


State 107

   71 conditional_operator: _LPAREN rel_exp _RPAREN . _QMARK conditional_value _DDOT conditional_value

    _QMARK  shift, and go to state 118


State 108

   51 num_exp: num_exp . arop exp
   56 exp: _LPAREN num_exp . _RPAREN

    _RPAREN    shift, and go to state 105
    _AROP      shift, and go to state 90
    _ASTERIKS  shift, and go to state 91

    arop  go to state 92


State 109

   51 num_exp: num_exp arop exp .

    $default  reduce using rule 51 (num_exp)


State 110

   45 for_loop: _FOR _LPAREN assignment_statement @8 . rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 statement

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 102
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70
    rel_exp               go to state 119


State 111

   39 do_loop: _DO @5 statement _WHILE . _LPAREN rel_exp _RPAREN _SEMICOLON

    _LPAREN  shift, and go to state 120


State 112

   42 while_loop: _WHILE @6 _LPAREN rel_exp . $@7 _RPAREN statement

    $default  reduce using rule 41 ($@7)

    $@7  go to state 121


State 113

   76 if_part: _IF _LPAREN @11 rel_exp $@12 . _RPAREN statement

    _RPAREN  shift, and go to state 122


State 114

   51 num_exp: num_exp . arop exp
   68 argument: num_exp .

    _AROP      shift, and go to state 90
    _ASTERIKS  shift, and go to state 91

    $default  reduce using rule 68 (argument)

    arop  go to state 92


State 115

   64 function_call: _ID $@10 _LPAREN argument_list . _RPAREN
   66 argument_list: argument_list . _COMMA argument

    _RPAREN  shift, and go to state 123
    _COMMA   shift, and go to state 124


State 116

   65 argument_list: argument .

    $default  reduce using rule 65 (argument_list)


State 117

   51 num_exp: num_exp . arop exp
   77 rel_exp: num_exp _RELOP num_exp .

    _AROP      shift, and go to state 90
    _ASTERIKS  shift, and go to state 91

    $default  reduce using rule 77 (rel_exp)

    arop  go to state 92


State 118

   71 conditional_operator: _LPAREN rel_exp _RPAREN _QMARK . conditional_value _DDOT conditional_value

    _ID           shift, and go to state 125
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62

    literal            go to state 126
    conditional_value  go to state 127


State 119

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp . _SEMICOLON left_part_assignment _RPAREN $@9 statement

    _SEMICOLON  shift, and go to state 128


State 120

   39 do_loop: _DO @5 statement _WHILE _LPAREN . rel_exp _RPAREN _SEMICOLON

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    num_exp               go to state 102
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    conditional_operator  go to state 70
    rel_exp               go to state 129


State 121

   42 while_loop: _WHILE @6 _LPAREN rel_exp $@7 . _RPAREN statement

    _RPAREN  shift, and go to state 130


State 122

   76 if_part: _IF _LPAREN @11 rel_exp $@12 _RPAREN . statement

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 131
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 123

   64 function_call: _ID $@10 _LPAREN argument_list _RPAREN .

    $default  reduce using rule 64 (function_call)


State 124

   66 argument_list: argument_list _COMMA . argument

    _ID           shift, and go to state 60
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62
    _LPAREN       shift, and go to state 63
    _ASTERIKS     shift, and go to state 64
    _AMP          shift, and go to state 65

    $default  reduce using rule 67 (argument)

    num_exp               go to state 114
    exp                   go to state 67
    literal               go to state 68
    function_call         go to state 69
    argument              go to state 132
    conditional_operator  go to state 70


State 125

   73 conditional_value: _ID .

    $default  reduce using rule 73 (conditional_value)


State 126

   72 conditional_value: literal .

    $default  reduce using rule 72 (conditional_value)


State 127

   71 conditional_operator: _LPAREN rel_exp _RPAREN _QMARK conditional_value . _DDOT conditional_value

    _DDOT  shift, and go to state 133


State 128

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp _SEMICOLON . left_part_assignment _RPAREN $@9 statement

    _ID  shift, and go to state 97

    left_part_assignment  go to state 134


State 129

   39 do_loop: _DO @5 statement _WHILE _LPAREN rel_exp . _RPAREN _SEMICOLON

    _RPAREN  shift, and go to state 135


State 130

   42 while_loop: _WHILE @6 _LPAREN rel_exp $@7 _RPAREN . statement

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 136
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 131

   76 if_part: _IF _LPAREN @11 rel_exp $@12 _RPAREN statement .

    $default  reduce using rule 76 (if_part)


State 132

   66 argument_list: argument_list _COMMA argument .

    $default  reduce using rule 66 (argument_list)


State 133

   71 conditional_operator: _LPAREN rel_exp _RPAREN _QMARK conditional_value _DDOT . conditional_value

    _ID           shift, and go to state 125
    _INT_NUMBER   shift, and go to state 61
    _BYTE_NUMBER  shift, and go to state 62

    literal            go to state 126
    conditional_value  go to state 137


State 134

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp _SEMICOLON left_part_assignment . _RPAREN $@9 statement

    _RPAREN  shift, and go to state 138


State 135

   39 do_loop: _DO @5 statement _WHILE _LPAREN rel_exp _RPAREN . _SEMICOLON

    _SEMICOLON  shift, and go to state 139


State 136

   42 while_loop: _WHILE @6 _LPAREN rel_exp $@7 _RPAREN statement .

    $default  reduce using rule 42 (while_loop)


State 137

   71 conditional_operator: _LPAREN rel_exp _RPAREN _QMARK conditional_value _DDOT conditional_value .

    $default  reduce using rule 71 (conditional_operator)


State 138

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp _SEMICOLON left_part_assignment _RPAREN . $@9 statement

    $default  reduce using rule 44 ($@9)

    $@9  go to state 140


State 139

   39 do_loop: _DO @5 statement _WHILE _LPAREN rel_exp _RPAREN _SEMICOLON .

    $default  reduce using rule 39 (do_loop)


State 140

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 . statement

    _IF        shift, and go to state 38
    _RETURN    shift, and go to state 39
    _ID        shift, and go to state 40
    _LBRACKET  shift, and go to state 41
    _FOR       shift, and go to state 42
    _DO        shift, and go to state 44
    _WHILE     shift, and go to state 45
    _ASM       shift, and go to state 11

    asm                   go to state 46
    statement             go to state 141
    increment             go to state 48
    decrement             go to state 49
    compound_statement    go to state 50
    do_loop               go to state 51
    while_loop            go to state 52
    for_loop              go to state 53
    assignment_statement  go to state 54
    left_part_assignment  go to state 55
    if_statement          go to state 56
    if_part               go to state 57
    return_statement      go to state 58


State 141

   45 for_loop: _FOR _LPAREN assignment_statement @8 rel_exp _SEMICOLON left_part_assignment _RPAREN $@9 statement .

    $default  reduce using rule 45 (for_loop)
